plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.pos_app"
    compileSdk 34
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.pos_app"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        
        // Enable vector drawables support
        vectorDrawables.useSupportLibrary = true
        
        // ProGuard settings
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../release.keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: localProperties.getProperty('storePassword')
            keyAlias System.getenv("KEY_ALIAS") ?: localProperties.getProperty('keyAlias')
            keyPassword System.getenv("KEY_PASSWORD") ?: localProperties.getProperty('keyPassword')
        }
    }

    buildFeatures {
        buildConfig true
    }
    
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            
            buildConfigField "String", "API_BASE_URL", '"http://10.0.2.2:3000/api"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            
            buildConfigField "String", "API_BASE_URL", '"https://api.nokta.app/api"'
            buildConfigField "boolean", "ENABLE_LOGGING", "false"
        }
        
        profile {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            
            buildConfigField "String", "API_BASE_URL", '"https://staging-api.nokta.app/api"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
        }
    }

    flavorDimensions "environment"
    productFlavors {
        development {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "نقطة - تطوير"
        }
        
        staging {
            dimension "environment"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            resValue "string", "app_name", "نقطة - تجريبي"
        }
        
        production {
            dimension "environment"
            resValue "string", "app_name", "نقطة"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }

    lint {
        checkReleaseBuilds false
        abortOnError false
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.1.0"
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Core Android libraries
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    
    // Printer support libraries
    implementation 'com.github.DantSu:ESCPOS-ThermalPrinter-Android:3.2.1'
    
    // Bluetooth libraries
    implementation 'com.jakewharton.timber:timber:5.0.1'
    
    // Network libraries
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    
    // Local database
    implementation 'androidx.room:room-runtime:2.5.0'
    implementation 'androidx.room:room-ktx:2.5.0'
    
    // Work manager for background tasks
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    
    // Biometric authentication
    implementation 'androidx.biometric:biometric:1.1.0'
    
    // Camera and QR scanning
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// ProGuard rules for release builds
android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        variant.assemble.doLast {
            copy {
                from variant.mappingFile
                into "${project.rootDir}/proguard"
                rename { String fileName ->
                    "mapping-${variant.name}-${variant.versionName}.txt"
                }
            }
        }
    }
}